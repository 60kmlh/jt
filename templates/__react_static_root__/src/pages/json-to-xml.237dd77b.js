(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{240:function(e,t){},242:function(e,t){},83:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return z}));var n=a(80),o=a.n(n),l=a(10),r=a.n(l),c=a(0),i=a.n(c),s=a(20),m=a(159),u=a(297),p=a(286),d=a(287),h=a(288),E=a(181),g=a(299),f=a(285),b=a(290),y=a(300),v=a(293),S=a(278),w=a(291),O=a(292),N=a(235),L=a(281),M=a(165),k=a.n(M),x=function(e){var t=Object(c.useRef)(null);return i.a.createElement("div",{className:e.className},i.a.createElement("input",{className:k.a.input,ref:t,type:"file",onChange:function(){console.log(t.current.files[0]);var a=t.current.files[0],n=new FileReader;n.onload=function(){e.onChange(n.result)},n.readAsText(a)}}),i.a.createElement(L.a,{onClick:function(e){return t.current&&t.current.click()},variant:"contained",color:"primary",component:"span"},"Upload json file"))},X=a(253),J=a.n(X),C=a(282),T=a(283);function D(e){var t=Object(c.useState)("data"),a=r()(t,2),n=a[0],o=a[1];return i.a.createElement("div",null,i.a.createElement(C.a,{inputProps:{style:{textAlign:"right"}},style:{marginRight:"10px"},value:n,onChange:function(e){var t=e.target.value;o(t)},endAdornment:i.a.createElement(T.a,{position:"end",style:{marginLeft:0}},".",e.type)}),i.a.createElement(L.a,{onClick:function(){if(e.content){var t=new Blob([e.content],{type:"text/".concat(e.type,";charset=utf-8")});J.a.saveAs(t,"".concat(n,".").concat(e.type))}},variant:"contained",color:"primary"},"Save"))}var j=a(296),A=a(254),W=a.n(A),B=a(294);function V(e){var t=i.a.useState(!1),a=r()(t,2),n=a[0],o=a[1],l=function(){o(!1)};return i.a.createElement("div",null,i.a.createElement(L.a,{onClick:function(){W()(e.content),o(!0)},variant:"contained",color:"primary"},"Copy"),i.a.createElement(j.a,{open:n,anchorOrigin:{vertical:"top",horizontal:"right"},autoHideDuration:3e3,onClose:l},i.a.createElement(B.a,{onClose:l,severity:"success"},"Copy Successful!")))}var I=a(256),F=a.n(I),P=a(258),H=a.n(P),R=a(166),U=a.n(R),Y=[{key:"compact",defaultVal:!0,desc:"Whether the input object is in compact form or not. By default, input is expected to be in non-compact form."},{key:"fullTagEmptyElement",defaultVal:!1,desc:"Whether to produce element without sub-elements as full tag pairs <a></a> rather than self closing tag <a/>."},{key:"indentCdata",defaultVal:!1,desc:"Whether to write CData in a new line and indent it. Will generate <a>\n <![CDATA[foo]]></a> instead of <a><![CDATA[foo]]></a>."},{key:"indentAttributes",defaultVal:!1,desc:"Whether to print attributes across multiple lines and indent them (when spaces is not 0)."},{key:"ignoreDeclaration",defaultVal:!1,desc:"Whether to ignore writing declaration directives of xml. For example, <?xml?> will be ignored."},{key:"ignoreInstruction",defaultVal:!1,desc:"Whether to ignore writing processing instruction of xml. For example, <?go there?> will be ignored."},{key:"ignoreAttributes",defaultVal:!1,desc:'Whether to ignore writing attributes of the elements. For example, x="1" in <a x="1"></a> will be ignored'},{key:"ignoreComment",defaultVal:!1,desc:"Whether to ignore writing comments of the elements. That is, no \x3c!-- --\x3e will be generated."},{key:"ignoreCdata",defaultVal:!1,desc:"Whether to ignore writing CData of the elements. That is, no <![CDATA[ ]]> will be generated."},{key:"ignoreDoctype",defaultVal:!1,desc:"Whether to ignore writing Doctype of the elements. That is, no <!DOCTYPE > will be generated."},{key:"ignoreText",defaultVal:!1,desc:"Whether to ignore writing texts of the elements. For example, hi text in <a>hi</a> will be ignored."}],G={};function z(){var e=Object(c.useState)(""),t=r()(e,2),a=t[0],n=t[1],l=Object(c.useState)(""),L=r()(l,2),M=L[0],k=L[1],X=Object(c.useState)(Object.assign(G,{spaces:4})),J=r()(X,2),C=J[0],T=J[1],j=function(e){T(Object.assign({},C,o()({},e.target.name,e.target.checked)))};return Object(c.useEffect)((function(){!function(){try{k(Object(N.json2xml)(a,C))}catch(e){console.log(e)}}()}),[a,C]),i.a.createElement("div",null,i.a.createElement(s.Head,null,i.a.createElement("title",null,"convert json to xml"),i.a.createElement("meta",{name:"description",content:"This is a tool for converting json to xml formate"})),i.a.createElement(x,{className:U.a.mb40,onChange:function(e){n(e)}}),i.a.createElement(m.a,{className:U.a.mb40,elevation:1},i.a.createElement(u.a,null,i.a.createElement(p.a,{expandIcon:i.a.createElement(F.a,null),"aria-controls":"panel1a-content",id:"panel1a-header"},"Options"),i.a.createElement(d.a,null,i.a.createElement(h.a,null,i.a.createElement(E.a,{container:!0},Y.map((function(e){return i.a.createElement(E.a,{item:!0,lg:3,key:e.key},i.a.createElement(g.a,{title:e.desc},i.a.createElement(f.a,{"aria-label":"help"},i.a.createElement(H.a,null))),i.a.createElement(b.a,{labelPlacement:"start",control:i.a.createElement(y.a,{checked:C[e.key],onChange:j,name:e.key}),key:e.key,label:e.key}))})),i.a.createElement(E.a,{item:!0,lg:3},i.a.createElement(b.a,{labelPlacement:"start",control:i.a.createElement(v.a,{className:U.a.spaces,value:C.spaces,type:"number",name:"spaces",onChange:function(e){T(Object.assign({},C,o()({},e.target.name,Number(e.target.value))))}}),label:"spaces"}))))))),i.a.createElement(m.a,{className:"".concat(U.a.mb40," ").concat(U.a.editor),elevation:3},i.a.createElement(E.a,{container:!0,justify:"space-around",spacing:3},i.a.createElement(E.a,{item:!0,lg:6},i.a.createElement(v.a,{className:U.a.textArea,label:"JSON",variant:"outlined",multiline:!0,rows:15,value:a,name:"json",onChange:function(e){var t=e.target.value;n(t)}})),i.a.createElement(E.a,{item:!0,lg:6},i.a.createElement(v.a,{className:U.a.textArea,label:"XMl",variant:"outlined",multiline:!0,rows:15,value:M,name:"xml"})))),i.a.createElement(m.a,{className:"".concat(U.a.mb40," ").concat(U.a.optBtn),elevation:3},i.a.createElement(E.a,{container:!0,justify:"flex-end"},i.a.createElement(V,{content:M}),i.a.createElement(D,{content:M,type:"xml"}))),i.a.createElement(S.a,{variant:"h4",component:"h1",gutterBottom:!0},"Guide To Converting JSON To XML"),i.a.createElement(S.a,{variant:"h5",component:"h2",gutterBottom:!0},"1. How to use this tool to convert JSON to XML."),i.a.createElement(S.a,{component:"h3",gutterBottom:!0},"Step 1: Enter the JSON text, or upload your *.JSON file directly."),i.a.createElement(S.a,{component:"h3",gutterBottom:!0},"Step 2: In the JSON to XML conversion process, you can click on the options to drop down and you can set different options to determine how to convert JSON to XML."),i.a.createElement(S.a,{component:"h3",gutterBottom:!0},"Step 3: Save the converted XML."),i.a.createElement(w.a,null,i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(1) Click the Copy button, you can copy the converted XML text to the clipped version.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(2) Enter the file name and click the Save button, you can download the converted XML text."))),i.a.createElement(S.a,{variant:"h5",component:"h2",gutterBottom:!0},"2. What is JSON?"),i.a.createElement(w.a,null,i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(1) The full name of JSON is JavaScript Object Notation.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(2) JSON is a lightweight data interchange format. It is easy to read and write, but also easy to parse and generate by machine.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(3) JSON is built on two structures: A collection of name/value pairs and an ordered list of values."))),i.a.createElement(S.a,{variant:"h5",component:"h2",gutterBottom:!0},"3. What is XML?"),i.a.createElement(w.a,null,i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(1) The full name of XML is eXtensible Markup Language.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(2) XML is a markup language much like HTML, a data representation format that can describe very complex data structures and is commonly used to transfer and store data.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),'(3) XML has a fixed structure, the first line must be <?xml version="1.0"? >, with optional encoding. Immediately after that, the DTD is optional if declared with something like <!DOCTYPE note SYSTEM "book.dtd"> is the Document Definition Type (DTD: Document Type Definition). Next is the XML document content. An XML document has one and only one root element, which can contain any number of child elements, and the elements can contain attributes.'))),i.a.createElement(S.a,{variant:"h5",component:"h2",gutterBottom:!0},"4. 10 Differences between JSON and XML"),i.a.createElement(w.a,null,i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(1) JSON is based on JavaScript language; XML is derived from SGML.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(2) JSON is a way to represent objects; XML is a markup language that uses markup structures to represent data items.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(3) JSON is JavaScript Object Notation; XML is Extensible Markup Language.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(4) XML's files are relatively difficult to read and interpret; compared with XML, JSON's files are very easy to read.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(5) JSON does not provide any support for namespaces; XML supports namespaces.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(6) JSON supports arrays; XML does not support arrays.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(7) JSON only supports UTF-8 encoding; XML supports various encodings.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(8) JSON is less secure; XML is more secure than JSON.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(9) JSON does not use the end tag; XML has start and end tags.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(10) JSON does not support comments; XML supports comments."))),i.a.createElement(S.a,{variant:"h5",component:"h2",gutterBottom:!0},"5. When need to convert JSON to XML?"),i.a.createElement(w.a,null,i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(1) Describe ui structure using XML, XML data will be more consistent with human descriptions of UI layouts than JSON.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(2) XML is not suitable for dynamic languages but very suitable for strongly typed languages, c/c /java processing XML is easier than processing JSON.")),i.a.createElement(O.a,null,i.a.createElement(S.a,o()({component:"subtitle1"},"component","h4"),"(3) XML for creating new Internet languages: XHTML, WSDL, WAP, RSS, RDF, SMIL and etc."))))}Y.forEach((function(e){G[e.key]=e.defaultVal}))}}]);